plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.antlr:antlr4-runtime:4.7.1'
    implementation 'org.postgresql:postgresql:42.2.5'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.testcontainers:postgresql:1.9.1'
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'io.github.kislaykishore'
            artifactId 'mssqlpgbridge'
            version '0.0.2-SNAPSHOT'
        pom {
            name = 'MSSQL-PostgreSQL bridge driver'
            description = 'PostgreSQL driver which converts MSSQL compatible queries to PostgreSQL compatible'
            url = 'https://github.com/kislaykishore/mssqlpgbridge'
            licenses {
                license {
                    name = 'BSD-2-Clause'
                    url = 'https://jdbc.postgresql.org/about/license.html'
                }
            }
            developers {
                developer {
                    id = 'kislaykishore'
                    name = 'Kislay Kishore'
                    email = 'kislay.kishore2003@gmail.com'
                }
            }
            scm {
                url = 'https://github.com/kislaykishore/mssqlpgbridge'
                connection = 'scm:git:git://github.com/kislaykishore/mssqlpgbridge.git'
                developerConnection = 'scm:git:ssh://git@github.com:kislaykishore/mssqlpgbridge.git'
            }
            }
            
            from components.java
            afterEvaluate {
	            pom.withXml {
	                def pomFile = file("${project.buildDir}/generated-pom.xml")
	                writeTo(pomFile)
	                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
	                artifact(pomAscFile) {
	                    classifier = null
	                    extension = 'pom.asc'
	                }
	            }
	
	            artifact(sourceJar) {
	                classifier = 'sources'
	            }
	            artifact(javadocJar) {
	                classifier = 'javadoc'
	            }
	            
	            project.tasks.signArchives.signatureFiles.each {
	                artifact(it) {
	                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
	                    if (matcher.find()) {
	                        classifier = matcher.group(1)
	                    } else {
	                        classifier = null
	                    }
	                    extension = 'jar.asc'
	                }
	            }
            }
        }
    }
    repositories {
        maven {
            def releaseRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            if (project.hasProperty('sonatypeUsername')) {
	            credentials {
	                username sonatypeUsername?:""
	                password sonatypePassword?:""
	            }
            }
        }
    }
}

signing {
    sign configurations.archives
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}